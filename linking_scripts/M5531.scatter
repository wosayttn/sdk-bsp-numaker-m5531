#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m55 -xc
; command above MUST be in first line (no comment above!)

; Note: If any modification needed, please copy to local project folder first.
; Note: Add '-mcmse' to first line if your software model is "Secure Mode".
;       #! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m55 -xc -mcmse

/* https://github.com/ARM-software/CMSIS_5/tree/develop/Device/ARM/ARMCM55/Source/ARM */

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
#include "partition_M5531.h"
#endif

/*
;-------- <<< Use Configuration Wizard in Context Menu >>> -------------------
*/

/*--------------------- Flash Configuration ----------------------------------
; <h> Flash Configuration
;   <o0> Flash Base Address    <0x0-0xFFFFFFFF:8>
;   <o1> Flash Size (in Bytes) <0x0-0xFFFFFFFF:8>
; </h>
 *----------------------------------------------------------------------------*/
#define FLASH_START     0x00100000
#define FLASH_SIZE      0x00200000

/*--------------------- Cacheable SRAM Configuration ---------------------------
; <h> SRAM Configuration
;   <o0> SRAM Size (in Bytes)    <0x0-0x00150000:8>
;   <o0> SRAM Base Address    <0x20100000-0x2024FFFF:8>
;   <o1> SRAM Size (in Bytes) <0x0-0x00150000:8>
; </h>
 *----------------------------------------------------------------------------*/

#define SRAM_START      0x20100000
#define SRAM_SIZE       0x00150000

#define SRAM_NONCACHEABLE_START	(SRAM_START)
#define SRAM_NONCACHEABLE_SIZE	0x00020000

#define LPSRAM_START    0x20310000
#define LPSRAM_SIZE     0x00002000
/*--------------------- Stack / Heap Configuration ---------------------------
; <h> Stack / Heap Configuration
;   <o0> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
;   <o1> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
; </h>
 *----------------------------------------------------------------------------*/
#define STACK_SIZE      0x00001000
#define HEAP_SIZE       0x00000000

/*--------------------- CMSE Veneer Configuration ---------------------------
; <h> CMSE Veneer Configuration
;   <o0>  CMSE Veneer Size (in Bytes) <0x0-0xFFFFFFFF:32>
; </h>
 *----------------------------------------------------------------------------*/
#define __CMSEVENEER_SIZE    0x200

/*
;------------- <<< end of configuration section >>> ---------------------------
*/

#define ITCM_START      0x00000010
#define ITCM_SIZE       0x00010000
#define DTCM_START      0x20000000
#define DTCM_SIZE       0x00020000

/*----------------------------------------------------------------------------
  User Stack & Heap boundary definition
 *----------------------------------------------------------------------------*/
/* Starts at end of DTCM - 8 byte stack seal */
#define __STACK_TOP    (DTCM_START + STACK_SIZE - __STACKSEAL_SIZE)
/* Starts after RW_RAM section, 8 byte aligned */
#define __HEAP_BASE    (AlignExpr(+0, 8))

/* ----------------------------------------------------------------------------
  Stack seal size definition
 *----------------------------------------------------------------------------*/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
#define __STACKSEAL_SIZE   ( 8 )
#else
#define __STACKSEAL_SIZE   ( 0 )
#endif

/*----------------------------------------------------------------------------
  Region base & size definition
 *----------------------------------------------------------------------------*/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
#define TZ_NSC_START        ( FLASH_START + FLASH_SIZE - __CMSEVENEER_SIZE )
#define TZ_NSC_SIZE         ( __CMSEVENEER_SIZE )
#else
#define TZ_NSC_SIZE         ( 0 )
#endif

#define __RO_BASE           ( FLASH_START )
#define __RO_SIZE           ( FLASH_SIZE - TZ_NSC_SIZE )

#define __RW_BASE           ( SRAM_NONCACHEABLE_START+SRAM_NONCACHEABLE_SIZE )
#define __RW_SIZE           ( SRAM_SIZE - SRAM_NONCACHEABLE_SIZE )

/*----------------------------------------------------------------------------
  Scatter Region definition
 *----------------------------------------------------------------------------*/
LR_ROM __RO_BASE __RO_SIZE  {                       ; load region size_region
    ER_ROM __RO_BASE __RO_SIZE  {                   ; load address = execution address
        *.o (RESET, +First)
        * (InRoot$$Sections)
        ; Make sure reset_handler ends up in root segment
        startup_M5531.o
        .ANY (+RO)
    }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    ; Region for CMSE Veneers
#if 0   /* Use specified base address and size for NSC_ROM */
    NSC_ROM TZ_NSC_START ALIGN 32 TZ_NSC_SIZE
    {
        .ANY (Veneer$$CMSE)
    }
#else   /* NSC_ROM is immediately following the previous region */
    NSC_ROM AlignExpr(+0, 32)
    {
        .ANY (Veneer$$CMSE)
    }
#endif
#endif

    ITCM ITCM_START ITCM_SIZE
    {
        .ANY (ITCM)
    }

    RW_NOINIT __RW_BASE UNINIT __RW_SIZE
    {
        .ANY (.bss.NoInit)
    }

    RW_RAM AlignExpr(+0, 8)
    {
        .ANY (+RW +ZI)
    }

    ; Check SRAM size overflow here and ImageLength is uncompressed size
    ScatterAssert((ImageLength(RW_NOINIT) + ImageLength(RW_RAM)) < (__RW_SIZE))

    ARM_LIB_STACK __STACK_TOP EMPTY - STACK_SIZE {}     ; Reserve empty region for stack

    DTCM_VTOR AlignExpr(+0, 128)
    {
        * (DTCM.VTOR)
    }

    DTCM AlignExpr(+0, 8)
    {
        .ANY (DTCM.Init)
        .ANY (.bss.DTCM.ZeroInit)
    }

#if HEAP_SIZE > 0
    ARM_LIB_HEAP  __HEAP_BASE EMPTY  HEAP_SIZE {}       ; Reserve empty region for heap
#endif

    ScatterAssert((ImageLength(DTCM_VTOR) + ImageLength(DTCM)) < (DTCM_SIZE - STACK_SIZE - __STACKSEAL_SIZE))	; ImageLength is uncompressed size

    SRAM_NONCACHEABLE SRAM_NONCACHEABLE_START SRAM_NONCACHEABLE_SIZE
    {
        .ANY (NonCacheable.Init)
        .ANY (.bss.NonCacheable.ZeroInit)
    }

    ; Empty section to get maximum size of NonCacheable region with Image$$SRAM_NONCACHEABLE_END$$Base
    SRAM_NONCACHEABLE_END (SRAM_NONCACHEABLE_START + SRAM_NONCACHEABLE_SIZE)
    {
        .ANY (SRAM_NONCACHEABLE_END)
    }

    LPSRAM LPSRAM_START LPSRAM_SIZE
    {
        .ANY (.lpSram)
    }


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    STACKSEAL +0 EMPTY __STACKSEAL_SIZE {
        ; Reserve empty region for stack seal immediately after stack
    }
#endif
}
